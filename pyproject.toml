[tool.poetry]
name = "Flask Web Server"
description = "Web server for URL shortener."
authors = ["kramber1024 <kramber268@gmail.com>"]
package-mode = false

[tool.poetry.dependencies]
python = "^3.12"
flask = "^3.0.3"
pydantic = "^2.8.2"
pydantic-settings = "^2.3.1"

[tool.poetry.group.test.dependencies]
pytest = "^8.2.2"
pytest-cov = "^5.0.0"
pytest-asyncio = "^0.23.8"
httpx = "^0.27.0"

[tool.poetry.group.dev.dependencies]
ruff = "^0.5.2"
mypy = "^1.10.1"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"


[tool.ruff]
line-length = 88
indent-width = 4
target-version = "py310"
exclude = [
    ".git",
    ".mypy_cache",
    ".pytest_cache",
    ".ruff_cache",
    ".venv",
    ".vscode",
]

[tool.ruff.lint]
select = ["ALL"]
ignore = [
    "D100",   # Disable check for missing docstring in public module
    "D101",   # Disable check for missing docstring in public class
    "D102",   # Disable check for missing docstring in public method
    "D103",   # Disable check for missing docstring in public function
    "D104",   # Disable check for missing docstring in public package
    "D105",   # Disable check for missing docstring in magic method
    "D106",   # Disable check for missing docstring in public nested class
    "D107",   # Disable check for missing docstring in __init__
    "ANN101", # Disable check for missing type annotation for self in method
    "CPY001", # Disable check for copyright notice
]
fixable = ["ALL"]
unfixable = []

[tool.ruff.lint.per-file-ignores]
"**test**" = [
    "S101",   # Disable check for use of assert in tests
    "SLF001", # Disable check for use of private members in tests
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"


[tool.mypy]
strict = true
warn_return_any = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
ignore_missing_imports = true
exclude = [".git", ".mypy_cache", ".pytest_cache", ".venv", ".vscode"]


[tool.coverage.run]
omit = ["tests/*", "app/main.py"]

[tool.coverage.report]
exclude_lines = [
    "if TYPE_CHECKING:",
    "if __name__ == .__main__.:",
    "pragma: no cover",
]
